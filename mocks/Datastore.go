// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	models "github.com/victor-nach/time-tracker/models"
)

// Datastore is an autogenerated mock type for the Datastore type
type Datastore struct {
	mock.Mock
}

// CreateSession provides a mock function with given fields: session
func (_m *Datastore) CreateSession(session *models.Session) (*models.Session, error) {
	ret := _m.Called(session)

	var r0 *models.Session
	if rf, ok := ret.Get(0).(func(*models.Session) *models.Session); ok {
		r0 = rf(session)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Session)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*models.Session) error); ok {
		r1 = rf(session)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateUser provides a mock function with given fields: user
func (_m *Datastore) CreateUser(user *models.User) (*models.User, error) {
	ret := _m.Called(user)

	var r0 *models.User
	if rf, ok := ret.Get(0).(func(*models.User) *models.User); ok {
		r0 = rf(user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*models.User) error); ok {
		r1 = rf(user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteSession provides a mock function with given fields: id
func (_m *Datastore) DeleteSession(id string) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetSession provides a mock function with given fields: id, owner
func (_m *Datastore) GetSession(id string, owner string) (*models.Session, error) {
	ret := _m.Called(id, owner)

	var r0 *models.Session
	if rf, ok := ret.Get(0).(func(string, string) *models.Session); ok {
		r0 = rf(id, owner)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Session)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(id, owner)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSessions provides a mock function with given fields: owner, filter
func (_m *Datastore) GetSessions(owner string, filter string) ([]*models.Session, error) {
	ret := _m.Called(owner, filter)

	var r0 []*models.Session
	if rf, ok := ret.Get(0).(func(string, string) []*models.Session); ok {
		r0 = rf(owner, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Session)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(owner, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUser provides a mock function with given fields: id
func (_m *Datastore) GetUser(id string) (*models.User, error) {
	ret := _m.Called(id)

	var r0 *models.User
	if rf, ok := ret.Get(0).(func(string) *models.User); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserByEmail provides a mock function with given fields: email
func (_m *Datastore) GetUserByEmail(email string) (*models.User, error) {
	ret := _m.Called(email)

	var r0 *models.User
	if rf, ok := ret.Get(0).(func(string) *models.User); ok {
		r0 = rf(email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateSession provides a mock function with given fields: id, info
func (_m *Datastore) UpdateSession(id string, info models.SessionInfo) error {
	ret := _m.Called(id, info)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, models.SessionInfo) error); ok {
		r0 = rf(id, info)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
