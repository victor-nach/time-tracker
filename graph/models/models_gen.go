// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package models

import (
	"fmt"
	"io"
	"strconv"
)

type AuthResponse struct {
	Success      *bool   `json:"success"`
	Message      *string `json:"message"`
	JwtToken     string  `json:"jwtToken"`
	RefreshToken string  `json:"refreshToken"`
	User         *User   `json:"User"`
}

type Response struct {
	Success *bool   `json:"success"`
	Message *string `json:"message"`
	Token   *string `json:"token"`
}

type Session struct {
	ID          *string `json:"id"`
	Owner       *string `json:"owner"`
	Title       *string `json:"title"`
	Description *string `json:"description"`
	Start       *int    `json:"start"`
	End         *int    `json:"end"`
	Ts          *int    `json:"Ts"`
}

type SessionInput struct {
	Title       *string `json:"title"`
	Description *string `json:"description"`
	Start       int     `json:"start"`
	End         int     `json:"end"`
}

type User struct {
	ID       *string `json:"id"`
	Name     *string `json:"name"`
	Email    *string `json:"email"`
	Password *string `json:"password"`
	Ts       *int    `json:"Ts"`
}

type UpdateSessionInput struct {
	Title       *string `json:"title"`
	Description *string `json:"description"`
}

type FilterType string

const (
	FilterTypeDay   FilterType = "day"
	FilterTypeWeek  FilterType = "week"
	FilterTypeMonth FilterType = "month"
)

var AllFilterType = []FilterType{
	FilterTypeDay,
	FilterTypeWeek,
	FilterTypeMonth,
}

func (e FilterType) IsValid() bool {
	switch e {
	case FilterTypeDay, FilterTypeWeek, FilterTypeMonth:
		return true
	}
	return false
}

func (e FilterType) String() string {
	return string(e)
}

func (e *FilterType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = FilterType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid filterType", str)
	}
	return nil
}

func (e FilterType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
